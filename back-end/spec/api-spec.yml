openapi: 3.0.0
info:
  title: "Chattly Service"
  description: "This service provides endpoints for all `chattly` related interactions"
  version: 1.0.0
  contact:
    name: "AKEJU FATAI"
    email: "fatai@mail.com"

x-organization: chattly
x-service-id: api

servers:
  - description: Staging Ingress
    url: https://api.chattly

tags:
  - name: auth
    description: "Authentication related endpoints"
  - name: accounts
    description: "Account related endpoints"
  # - name: users
  #   description: "User related endpoints"
  - name: chats
    description: "Chat related endpoints"

security:
  - bearerToken: [ ]

paths:
  /auth/register:
    post:
      summary: "User Registration"
      description: "User Registration"
      operationId: registerUser
      x-visibility: public
      security: [ ]
      tags:
        - "auth"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserDto"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusDto"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "409":
          $ref: "#/components/responses/ConflictError"
        "default":
          $ref: "#/components/responses/ServerError"

  /auth/login:
    post:
      summary: "User Login"
      description: "User Login"
      operationId: login
      x-visibility: public
      security: [ ]
      tags:
        - "auth"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "default":
          $ref: "#/components/responses/ServerError"

  /auth/logout:
    post:
      summary: "User Logout"
      description: "User Logout"
      operationId: logout
      x-visibility: public
      tags:
        - "auth"
      responses:
        "200":
          $ref: "#/components/responses/StatusResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "default":
          $ref: "#/components/responses/ServerError"

  /me/single-chat/connection:
    post:
      summary: "Initiate Single Chat Connection"
      description: "Initiate Single Chat Connection"
      operationId: initiateSingleChatConnection
      x-visibility: "public"
      tags:
        - "chats"
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateSingleChatConnectionDto"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitiateSingleChatConnectionResponse"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "default":
          $ref: "#/components/responses/ServerError"

    get:
      summary: "Get Single Chat Connections"
      description: "Get Single Chat Connections"
      operationId: getSingleChatConnections
      x-visibility: "public"
      tags:
        - "chats"
      security: [ ]
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleChatConnectionsResponse'
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "default":
          $ref: "#/components/responses/ServerError"

  /me/group-chats:
    post:
      summary: "Create Group Chat"
      description: "Create Group Chat"
      operationId: createGroupChat
      x-visibility: "public"
      tags:
        - "chats"
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupChatDto"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupChat"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "409":
          $ref: "#/components/responses/ConflictError"
        "default":
          $ref: "#/components/responses/ServerError"

    get:
      summary: "Get Group Chats"
      description: "Get Group Chats"
      operationId: getGroupChats
      x-visibility: "public"
      tags:
        - "chats"
      security: [ ]
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupChatsResponse'
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "default":
          $ref: "#/components/responses/ServerError"

  /me/group-chats/{groupChatId}:
    parameters:
      - $ref: "#/components/parameters/groupChatIdParam"

    patch:
      summary: "Update Group Chat"
      description: "Update Group Chat"
      operationId: updateGroupChat
      x-visibility: "public"
      tags:
        - "chats"
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupChatDto"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupChat"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "409":
          $ref: "#/components/responses/ConflictError"
        "default":
          $ref: "#/components/responses/ServerError"

  /me/chat-message/send:
    post:
      summary: "Send Chat Message"
      description: "Send Chat Message"
      operationId: sendChatMessage
      x-visibility: "public"
      tags:
        - "chats"
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendChatMessageDto"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusDto"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "default":
          $ref: "#/components/responses/ServerError"

  /group-chats/{groupChatId}/members:
    parameters:
      - $ref: "#/components/parameters/groupChatIdParam"

    get:
      summary: "Get Group Chat Members"
      description: "Get Group Chat Members"
      operationId: getGroupChatMembers
      x-visibility: "public"
      tags:
        - "chats"
      security: [ ]
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupChatMembersResponse'
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "default":
          $ref: "#/components/responses/ServerError"

  /me:
    get:
      summary: "Get My Profile"
      operationId: getMyProfile
      description: "Get profile of active user (extracting identity from token)"
      x-visibility: "public"
      tags:
        - "accounts"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "default":
          $ref: "#/components/responses/ServerError"

    patch:
      summary: "Update My User"
      operationId: updateUser
      description: "Update profile"
      x-visibility: "public"
      tags:
        - "accounts"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "default":
          $ref: "#/components/responses/ServerError"

  /me/password/change:
    put:
      summary: "Change Password"
      operationId: changePassword
      description: "Change Password"
      x-visibility: "public"
      tags:
        - "accounts"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordDto"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          $ref: "#/components/responses/ConflictError"
        "default":
          $ref: "#/components/responses/ServerError"

  # NOTE: TO BE UPDATED WITH APPROPRIATE REQUEST & RESPONSE
  /me/top-chats/messages:
    post:
      summary: "Get Top-Chats Messages"
      description: "Get Top-Chats Messages"
      operationId: getTopChatsMessages
      x-visibility: "public"
      tags:
        - "chats"
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TopChatsMessagesDto"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitiateSingleChatConnectionResponse"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "default":
          $ref: "#/components/responses/ServerError"

  # GROUP CHAT MEMBERS ENDPOINTS TO BE ADDED
  # - ADD GROUP CHAT MEMBER
  # - REMOVE GROUP CHAT MEMBER

  # MESSAGES ENDPOINTS TO BE ADDED
  # - ON REFRESH OR LOGIN OF PAGE TO FETCH CHAT MESSAGES -> /me/chats
  # - MAYBE GET LAST 10 MESSAGES FOR USER BEFORE GIVEN ID or TIMESTAMP

components:
  schemas:
    # REQUEST OBJECT DEFINITIONS

    RegisterUserDto:
      type: "object"
      additionalProperties: false
      required:
        - "email"
        - "username"
        - "password"
      properties:
        email:
          type: "string"
          format: "email"
          description: "User's email"
        username:
          type: "string"
          minLength: 3
          description: "User's username in platform"
        password:
          type: "string"
          minLength: 4

    LoginDto:
      type: "object"
      additionalProperties: false
      required:
        - "password"
      properties:
        # Can use one of either `username` or `email` to be more specific about login constraints
        username:
          type: "string"
          minLength: 3
          description: "User's username in platform"
        email:
          type: "string"
          format: "email"
          description: "User's email"
        password:
          type: string
          minLength: 4

    UpdateUserDto:
      type: "object"
      additionalProperties: false
      minProperties: 1
      properties:
        chatDisplayName:
          type: "string"
          minLength: 2
        imageURL:
          type: "string"
          format: "url"
        bio:
          type: "string"
          description: "User biography (information about user)"

    InitiateSingleChatConnectionDto:
      type: "object"
      additionalProperties: false
      required:
        - "newConnectUsername"
      properties:
        newConnectUsername:
          type: "string"
          minLength: 3
          description: "New connection username"
        initialChatMessage:
          type: "string"
          minLength: 1
          description: "Optional chat message. A default `greeting` message will be sent if not provided"

    CreateGroupChatDto:
      type: "object"
      description: "Create group-chat request data"
      required:
        - "name"
        - "members"
      properties:
        name:
          type: "string"
          minLength: 2
        members:
          type: "array"
          description: "List of usernames or members for group chat"
          minItems: 1
          uniqueItems: true
          items:
            type: "string"
        description:
          type: "string"
        image:
          type: "string"
          format: "binary"
          description: "Group chat display image"
        initialChatMessage:
          type: "string"
          minLength: 1
          description: "Optional chat message. A default `greeting` message will be sent if not provided"

    UpdateGroupChatDto:
      type: "object"
      description: "Update group-chat request data"
      minProperties: 1
      properties:
        name:
          type: "string"
          minLength: 2
        description:
          type: "string"
        image:
          type: "string"
          format: "binary"
          description: "Group chat display image"

    SendChatMessageDto:
      type: "object"
      description: "Send chat-message request data"
      required:
        - "content"
        - "recipientID"
      properties:
        content:
          type: "string"
          minLength: 1
        recipientID:
          type: "string"
          format: "uuid"
          description: "ID of the receiver, which can be for either SINGLE-CHAT or GROUP-CHAT"
        recipientType:
          $ref: "#/components/schemas/ChatType"

    ChangePasswordDto:
      type: "object"
      additionalProperties: false
      required:
        - "password"
        - "newPassword"
      properties:
        password:
          type: "string"
          minLength: 3
          description: "Current password"
        newPassword:
          type: "string"
          minLength: 3
          description: "New password"

    TopChatsMessagesDto:
      type: "object"
      additionalProperties: false
      required:
        - "entityIds"
      properties:
        entityIds:
          type: "array"
          minItems: 1
          uniqueItems: true
          items:
            type: "string"
            minLength: 3


    # RESPONSE OBJECT DEFINITIONS

    LoginResponse:
      type: "object"
      required:
        - "user"
        - "token"
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: "string"
          minLength: 10
          description: "User authentication token (JWT)"

    User:
      type: "object"
      required:
        - "id"
        - "username"
        # - "email" // NOTE: GETTING CHAT CONNECTIONS DOES NOT NEED THIS
        - "role"
        - "active"
        - "chatDisplayName"
        - "createdAt"
        - "updatedAt"
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "User unique identifier"
        username:
          type: "string"
          minLength: 3
          description: "User's username in platform"
        email:
          type: "string"
          format: "email"
          description: "User's email"
        role:
          $ref: "#/components/schemas/Role"
        chatDisplayName:
          type: "string"
          minLength: 2
        active:
          type: "boolean"
          default: true
        imageURL:
          type: "string"
          format: "url"
        bio:
          type: "string"
          description: "User biography (information about user)"
        lastLoginAt:
          type: "string"
          format: "date-time"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"

    InitiateSingleChatConnectionResponse:
      type: "object"
      description: "Response object for chat-connection created"
      required:
        - "chatMessage"
        - "newConnectUser"
      properties:
        chatMessage:
          type: "string"
        newConnectUser:
          $ref: '#/components/schemas/User'

    GroupChat:
      type: "object"
      description: "Group chat object"
      required:
        - "name"
      properties:
        name:
          type: "string"
          minLength: 2
        description:
          type: "string"
        image:
          type: "string"
          format: "url"
          description: "Image url for group-chat"
        createdBy:
          type: "string"
          format: "uuid"
          description: "User who created the group-chat"

    SingleChatConnectionsResponse:
      type: "object"
      required:
        - records
      properties:
        records:
          type: "array"
          items:
            $ref: '#/components/schemas/User'

    GroupChatsResponse:
      type: "object"
      required:
        - records
      properties:
        records:
          type: "array"
          items:
            $ref: '#/components/schemas/GroupChat'

    GroupChatMembersResponse:
      type: "object"
      required:
        - records
      properties:
        records:
          type: "array"
          items:
            $ref: '#/components/schemas/User'

    StatusDto:
      description: Status data, check additional message field.
      type: object
      required:
        - success
      properties:
        success:
          description: >-
            Status can be successful or failed, a value of true indicates
            success.
          type: boolean
          example: true
        message:
          type: string
          description: additional message describing status.
        data:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Data associated with the status, this will not always be present
        error:
          $ref: '#/components/schemas/ErrorMessageDto'
      x-common-model: StatusDto

    ErrorMessageDto:
      description: >-
        Default error object for services. This gives consistent error object
        that all services may use.
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
          example: UNKNOWN_ERROR
        message:
          type: string
          description: Descriptive error message
          example: Request could not be completed due to an error
        data:
          type: object
          description: Additional data for this error message.
          additionalProperties: true
          properties: {}
      x-common-model: ErrorMessageDto

    # ENUM DEFINITIONS

    Role:
      type: "string"
      description: "List of user roles"
      enum: &Role
        - USER
        - ADMIN

    ChatType:
      type: "string"
      description: "List of chat types"
      enum: &ChatType
        - S
        - G
      x-enum-varnames:
        - SINGLE
        - GROUP

  parameters:
    userIdParam:
      in: "path"
      name: "userId"
      schema:
        type: "string"
        format: "uuid"
      required: true
      description: "User identifier in path"

    groupChatIdParam:
      in: "path"
      name: "groupChatId"
      schema:
        type: "string"
        format: "uuid"
      required: true
      description: "Group-chat identifier in path"

    pageQuery:
      in: "query"
      name: page
      schema:
        type: "integer"
        format: "int32"
        minimum: 1
        description: "Positive integer"
      required: false
      description: Page to be gotten based on size parameters

    limitQuery:
      in: "query"
      name: limit
      schema:
        type: "integer"
        format: "int32"
        minimum: 1
        description: "Positive integer"
      required: false
      description: Number of items to be gotten per page

    sortQuery:
      in: "query"
      name: sort
      schema:
        type: "string"
        pattern: '^([a-zA-Z]{2,}(:asc|:desc)?)+(?:(,([a-zA-Z]{2,}(:asc|:desc)?))*)$'
      required: false
      allowReserved: true
      description: Sort string used to sort various fields in `asc` or `desc` order. E.g. `name:asc,createdAt:desc`

    avatarQuery:
      in: "query"
      name: includeAvatar
      schema:
        type: "boolean"
      required: false
      description: Returns the user's avater if set to true

  responses:
    StatusResponse:
      description: Request status
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/StatusDto"
          example:
            success: true
            message: 'Action completed successfully'
            data:
              label: name of service
              expiry: date

    InvalidRequest:
      description: Request could not be validated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessageDto"
          example:
            code: 'BAD_REQUEST'
            message: 'Request could not be validated.'

    Unauthorized:
      description: Client is not authorized to make request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessageDto"
          example:
            code: 'UNAUTHORIZED'
            message: 'Either client security header is missing or it is not valid.'

    NotFound:
      description: Entity was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessageDto"
          example:
            code: 'NOT_FOUND'
            message: 'Information could not be found'

    ConflictError:
      description: Entity already exist while user tries to create it.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessageDto"
          example:
            code: 'ACCESS_DENIED'
            message: 'Entity already exist!'

    AccessDenied:
      description: Expected permission is not available.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessageDto"
          example:
            code: 'ACCESS_DENIED'
            message: 'Expected permission or scope is not present.'

    UnprocessableError:
      description: Entity could not be processed.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessageDto"
          example:
            code: 'UNPROCESSABLE'
            message: 'Sorry we could not process your request'

    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessageDto"
          example:
            code: 'INTERNAL_ERROR'
            message: 'An internal server error occurred.'

  securitySchemes:
    bearerToken:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
      description: "Authentication for user-facing endpoints. Uses bearer token in API prefix."
    authToken:
      type: "apiKey"
      name: "x-auth-token"
      in: "header"
      description: "Auth Token header for inter-service communication"
